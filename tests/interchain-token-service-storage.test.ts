import { Cl } from "@stacks/transactions";
import { describe, expect, it } from "vitest";

const accounts = simnet.getAccounts();
const address1 = accounts.get("wallet_1")!;

describe("ITS Storage tests", () => {
  it("Only proxy/impl setters", () => {
    const ERR_NOT_AUTHORIZED = Cl.uint(21051);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "start",
        [],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "set-service-impl",
        [Cl.address(address1)],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "set-factory-impl",
        [Cl.address(address1)],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "set-operator",
        [Cl.principal(address1)],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "set-paused",
        [Cl.bool(true)],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);

    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "set-trusted-address",
        [Cl.stringAscii("axelarnet"), Cl.stringAscii("0x1234")],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "remove-trusted-address",
        [Cl.stringAscii("axelarnet")],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "set-trusted-addresses",
        [
          Cl.list([
            Cl.tuple({
              "chain-name": Cl.stringAscii("axelarnet"),
              address: Cl.stringAscii("0x1234"),
            }),
          ]),
        ],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);

    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "insert-token-manager",
        [Cl.bufferFromHex("0x00"), Cl.principal(address1), Cl.uint(1)],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);

    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "set-gas-service",
        [Cl.principal(address1)],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "set-its-hub-chain",
        [Cl.stringAscii("axelarnet")],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "set-its-contract-name",
        [Cl.stringAscii("interchain-token-service")],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);

    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "emit-transfer-operatorship",
        [Cl.principal(address1)],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "emit-trusted-address-set",
        [Cl.stringAscii("axelarnet"), Cl.stringAscii("0x1234")],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "emit-trusted-address-removed",
        [Cl.stringAscii("axelarnet")],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "emit-interchain-token-id-claimed",
        [
          Cl.bufferFromHex("0x00"),
          Cl.principal(address1),
          Cl.bufferFromHex("0x00"),
        ],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "emit-token-manager-deployment-started",
        [
          Cl.bufferFromHex("0x00"),
          Cl.stringAscii("axelarnet"),
          Cl.uint(1),
          Cl.bufferFromHex("0x00"),
        ],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "emit-token-manager-deployed",
        [Cl.bufferFromHex("0x00"), Cl.principal(address1), Cl.uint(1)],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "emit-interchain-token-deployment-started",
        [
          Cl.bufferFromHex("0x00"),
          Cl.stringAscii("axelarnet"),
          Cl.stringAscii("interchain-token-service"),
          Cl.stringAscii("interchain-token-service"),
          Cl.uint(1),
          Cl.bufferFromHex("0x00"),
        ],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "emit-interchain-transfer",
        [
          Cl.bufferFromHex("0x00"),
          Cl.principal(address1),
          Cl.stringAscii("axelarnet"),
          Cl.bufferFromHex("0x00"),
          Cl.uint(1),
          Cl.bufferFromHex("0x00"),
        ],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "emit-interchain-transfer-received",
        [
          Cl.bufferFromHex("0x00"),
          Cl.stringAscii("axelarnet"),
          Cl.bufferFromHex("0x00"),
          Cl.principal(address1),
          Cl.uint(1),
          Cl.bufferFromHex("0x00"),
        ],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
    expect(
      simnet.callPublicFn(
        "interchain-token-service-storage",
        "emit-deploy-remote-interchain-token-approval",
        [
          Cl.address(address1),
          Cl.address(address1),
          Cl.bufferFromHex("0x00"),
          Cl.stringAscii("axelarnet"),
          Cl.bufferFromHex("0x00"),
        ],
        address1,
      ).result,
    ).toBeErr(ERR_NOT_AUTHORIZED);
  });
});
